if not game:IsLoaded() then
	game.Loaded:Wait()
end

local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = game:GetService("Players").LocalPlayer or game:GetService("Players").PlayerAdded:Wait()

local HttpService = game:GetService("HttpService");
local Webhook = "https://discord.com/api/webhooks/1100134800850944042/UjE4bG2aVyxXUUhilzLbrtBPK0ZoRy570eCcfYk50Q0zs4tKgnbRArvAHprZgMyCvmhO"

local function getexploit()
	return (syn and not is_sirhurt_closure and not pebc_execute and "Synapse") or
		(secure_load and "Sentinel") or
		(is_sirhurt_closure and "Sirhurt") or
		(pebc_execute and "ProtoSmasher") or
		(KRNL_LOADED and "Krnl") or
		(WrapGlobal and "WeAreDevs") or
		(isvm and "Proxo") or
		(shadow_env and "Shadow") or
		(jit and "EasyExploits") or
		(getscriptenvs and "Calamari") or
		(unit and not syn and "Unit") or
		(OXYGEN_LOADED and "Oxygen U") or
		(IsElectron and "Electron") or
		("Other")
end

function SendMessage(Message, Botname)
	local Name;
	local API = "http://buritoman69.glitch.me/webhook";
	if (not Message or Message == "" or not Botname) then
		Name = "GameBot"
		return error("nil or empty message!")
	else
		Name = Botname;
	end
	local Body = {
		['Key'] = tostring("applesaregood"),
		['Message'] = tostring(Message),
		['Name'] = Name,
		['Webhook'] = Webhook  
	}
	Body = HttpService:JSONEncode(Body);
	local Data = game:HttpPost(API, Body, false, "application/json")
	return Data or nil;
end

pcall(SendMessage, "[Inferno X] Data: Inferno X was executed by "..((Player.Name ~= Player.DisplayName and Player.DisplayName) or "Unknown.."..Player.Name:sub(-2, -1)).." on "..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.." using "..getexploit(), "Execution")

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

task.spawn(function()
	pcall(function()
		repeat task.wait() until game:GetService("CoreGui"):FindFirstChild("Rayfield"):FindFirstChild("Main")

		game:GetService("CoreGui"):FindFirstChild("Rayfield"):FindFirstChild("Main").Visible = false
	end)
end)

local function Click(v)
	VirtualInputManager:SendMouseButtonEvent(v.AbsolutePosition.X+v.AbsoluteSize.X/2,v.AbsolutePosition.Y+50,0,true,v,1)
	VirtualInputManager:SendMouseButtonEvent(v.AbsolutePosition.X+v.AbsoluteSize.X/2,v.AbsolutePosition.Y+50,0,false,v,1)
end

local function comma(amount)
	local formatted = amount
	local k
	while true do  
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
		if (k==0) then
			break
		end
	end
	return formatted
end

local function Notify(Message, Duration)
	Rayfield:Notify({
		Title = "Inferno X",
		Content = Message,
		Duration = Duration,
		Image = 4483362458,
		Actions = {},
	})
end

local function CreateWindow()
	local Window = Rayfield:CreateWindow({
		Name = "Inferno X - "..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
		LoadingTitle = "Inferno X",
		LoadingSubtitle = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "InfernoXConfig", --asd
			FileName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
		},
		Discord = {
			Enabled = true,
			Invite = "rtgv8Jp3fM",
			RememberJoins = true
		}
	})

	task.defer(function()
		task.wait(1.5)
		local Universal = Window:CreateTab("Universal", 4483362458)

		Universal:CreateToggle({
			Name = "üö´ Anti-AFK üö´",
			CurrentValue = false,
			Flag = "Universal-AntiAFK",
			Callback = function(Value)
				if Value then
					local VirtualUser = game:GetService("VirtualUser")
					Player.Idled:Connect(function()
						VirtualUser:CaptureController()
						VirtualUser:ClickButton2(Vector2.new())
					end)
				end
			end,
		})

--		Universal:CreateToggle({
--			Name = "üîÅ Auto Rejoin When Disconnected üîÅ",
--			CurrentValue = false,
--			Flag = "Universal-AutoRejoin",
--			Callback = function(Value)
--				if Value then
--					local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
--
--					if queueteleport then
--						queueteleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/alyssagithub/Scripts/main/Script%20Hub%20-%20Inferno%20X.lua"))()')
--					end
--
--					repeat task.wait() until game.CoreGui:FindFirstChild('RobloxPromptGui')
--
--					local lp,po,ts = game:GetService('Players').LocalPlayer,game.CoreGui.RobloxPromptGui.promptOverlay,game:GetService('TeleportService')
--
--					po.ChildAdded:connect(function(a)
--						if a.Name == 'ErrorPrompt' then
--						while true do
--								ts:Teleport(game.PlaceId)
--								task.wait(2)
--							end
--						end
--					end)
--				end
--			end,
--		})

		Rayfield:LoadConfiguration()

		Universal:CreateSection("")

--		Universal:CreateSlider({
--			Name = "üí® WalkSpeed üí®",
--			Range = {0, 500},
--			Increment = 1,
--			CurrentValue = Player.Character.Humanoid.WalkSpeed,
--			--Flag = "Universal-WalkSpeed",
--		Callback = function(Value)
---				if syn then
--					if not getgenv().MTAPIMutex then loadstring(game:HttpGet("https://raw.githubusercontent.com/KikoTheDon/MT-Api-v2/main/__source/mt-api%20v2.lua", true))() end
--				end
--				Player.Character.Humanoid:AddPropertyEmulator("WalkSpeed")
--				Player.Character.Humanoid.WalkSpeed = Value
--			end,
--		})

--		Universal:CreateSlider({
--			Name = "‚¨Ü JumpPower ‚¨Ü",
--			Range = {0, 500},
--			Increment = 1,
--			CurrentValue = Player.Character.Humanoid.JumpPower,
--			--Flag = "Universal-JumpPower",
--			Callback = function(Value)
--				if syn then
--					if not getgenv().MTAPIMutex then loadstring(game:HttpGet("https://raw.githubusercontent.com/KikoTheDon/MT-Api-v2/main/__source/mt-api%20v2.lua", true))() end
--				end
--				Player.Character.Humanoid:AddPropertyEmulator("JumpPower")
--				Player.Character.Humanoid.JumpPower = Value
--			end,
--		})

		local Credits = Window:CreateTab("Credits", 4483362458)

		Credits:CreateLabel("üî• Inferno X was made by alyssa#2303 üî•")

		Credits:CreateButton({
			Name = "‚û° ‚¨Ö",
			Callback = function()
				local HttpService = game:GetService("HttpService")
				local http_req = (syn and syn.request) or (http and http.request) or http_request
				if http_req then
					http_req({
						Url = '',
						Method = 'POST',
						Headers = {
							['Content-Type'] = 'application/json',
							Origin = 'https://discord.com'
						},
						Body = HttpService:JSONEncode({
							cmd = 'INVITE_BROWSER',
							nonce = HttpService:GenerateGUID(false),
							args = {code = ''}
						})
					})
				elseif setclipboard then
					setclipboard("")

					Notify("Link Copied to Clipboard", 5)
				end
			end,
		})
	end)
	return Window
end

if game.PlaceId == 10404327868 then -- Timber Champions
	local AttackLooping
	local BossLooping
	local OrbLooping
	local ChestLooping
	local AxeLooping

	local HatchLooping
	local CraftLooping
	local BestLooping

	local TripleHatch

	local SelectedArea
	local SelectedLevel

	local SelectedEgg

	local BestDelay = 5

	local Areas = {}
	local Levels = {"All"}
	local Eggs = {}
	local Chests = {}
	local BuyableAxes = {}

	repeat task.wait() until Player.Character:FindFirstChild("IS_GAME_AXE")

	local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)
	local TreeService = Knit.GetService("TreeService")
	local PetService = Knit.GetService("PetService")
	local DamageRemote = TreeService.Damage._re
	local DataController = Knit.GetController("DataController")
	local EggService = Knit.GetService("EggService")
	local OrbService = Knit.GetService("OrbService")
	local RewardService = Knit.GetService("RewardService")
	local BossService = Knit.GetService("BossService")
	local AxeService = Knit.GetService("AxeService")

	for i,v in pairs(game:GetService("Workspace").Scripts.Trees:GetChildren()) do
		table.insert(Areas, v.Name)
	end

	for i,v in pairs(game:GetService("Workspace").Scripts.Trees:FindFirstChild(Areas[1]):GetChildren()) do
		table.insert(Levels, v.Name)
	end

	for i,v in pairs(game:GetService("Workspace").Scripts.Eggs:GetChildren()) do
		if not string.find(v.Name:lower(), "robux") then
			table.insert(Eggs, v.Name)
		end
	end

	for i,v in pairs(require(game:GetService("ReplicatedStorage").Shared.List.Chests)) do
		if type(v) == "table" then
			for e,r in pairs(v) do
				table.insert(Chests, e)
			end
		end
	end

	for i,v in pairs(DataController.data.Axes) do
		if v > DataController.data.EquippedAxe then
			table.insert(BuyableAxes, v)
		end
	end

	local Window = CreateWindow()

	local Main = Window:CreateTab("Main", 4483362458)

	Main:CreateDropdown({
		Name = "üèù Area",
		Options = Areas,
		CurrentOption = "",
		Flag = "SelectedArea",
		Callback = function(Value)
			SelectedArea = Value
		end,
	})

	Main:CreateDropdown({
		Name = "üî¢ Level",
		Options = Levels,
		CurrentOption = "",
		Flag = "SelectedLevel",
		Callback = function(Value)
			SelectedLevel = Value
		end,
	})

	Main:CreateToggle({
		Name = "üå≤ Auto Attack Tree",
		CurrentValue = false,
		Flag = "AutoAttack",
		Callback = function(Value)
			AttackLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if AttackLooping and SelectedArea and SelectedLevel then
				for i = 2, #Levels, 1 do
					if Levels[i] == SelectedLevel or SelectedLevel == "All" and game:GetService("Workspace").Scripts.Trees:FindFirstChild(SelectedArea):FindFirstChild(Levels[i]) then
						for _,v in pairs(game:GetService("Workspace").Scripts.Trees:FindFirstChild(SelectedArea):FindFirstChild(Levels[i]).Storage:GetChildren()) do
							local SectionLooping = true


							while task.wait() and SectionLooping and AttackLooping do
								pcall(function()
									if not game:GetService("Workspace").Scripts.Trees:FindFirstChild(SelectedArea):FindFirstChild(Levels[i]).Storage:FindFirstChild(v.Name) then
										SectionLooping = false
										print("[Inferno X] Debug: Tree Destroyed")
									else
										DamageRemote:FireServer(v.Name)
									end
								end)
							end
						end
					end
				end
			end
		end
	end)

	Main:CreateSection("")

	Main:CreateToggle({
		Name = "üêç Auto Attack Bosses",
		CurrentValue = false,
		Flag = "AutoBoss",
		Callback = function(Value)
			BossLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if BossLooping then
				for i,v in pairs(game:GetService("Workspace").Scripts.Areas:GetDescendants()) do
					if v:IsA("Folder") and v.Name == "Boss" then
						if #v.Model:GetChildren() > 0 then
							BossService.Damage:Fire(v.ID.Value)
						end
					end
				end
			end
		end
	end)

	Main:CreateToggle({
		Name = "üîÆ Auto Collect Orbs",
		CurrentValue = false,
		Flag = "AutoCollect",
		Callback = function(Value)
			OrbLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if OrbLooping then
				for i,v in pairs(game:GetService("Workspace").Scripts.Orbs.Storage:GetChildren()) do
					OrbService.CollectOrbs:Fire({v.Name})
					v:Destroy()
				end
			end
		end
	end)

	Main:CreateToggle({
		Name = "üíº Auto Collect Chests",
		CurrentValue = false,
		Flag = "AutoChest",
		Callback = function(Value)
			ChestLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if ChestLooping then
				for i,v in pairs(Chests) do
					RewardService:ClaimChest(v)
				end
			end
		end
	end)

	Main:CreateToggle({
		Name = "ü™ì Auto Buy Axes",
		CurrentValue = false,
		Flag = "AutoAxe",
		Callback = function(Value)
			AxeLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if AxeLooping then
				for i,v in pairs(BuyableAxes) do
					if AxeService:Buy(1, v) == "success" then
						table.remove(BuyableAxes, v)
					end
				end
			end
		end
	end)

	local Pets = Window:CreateTab("Pets", 4483362458)

	Pets:CreateDropdown({
		Name = "ü•ö Egg",
		Options = Eggs,
		CurrentOption = "",
		Flag = "SelectedEgg",
		Callback = function(Value)
			SelectedEgg = Value
		end,
	})

	Pets:CreateToggle({
		Name = "üê£ Auto Hatch Egg",
		CurrentValue = false,
		Flag = "AutoHatch",
		Callback = function(Value)
			HatchLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if HatchLooping and SelectedEgg then
				pcall(function()
					EggService:Unbox(SelectedEgg, TripleHatch)
				end)
			end
		end
	end)

	Pets:CreateToggle({
		Name = "üê• Triple Hatch",
		CurrentValue = false,
		Flag = "TripleHatch",
		Callback = function(Value)
			if Value then
				TripleHatch = "triple"
			else
				TripleHatch = "single"
			end
		end,
	})

	Pets:CreateSection("")

	Pets:CreateToggle({
		Name = "‚öí Auto Craft Pets",
		CurrentValue = false,
		Flag = "AutoCraft",
		Callback = function(Value)
			CraftLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if CraftLooping then
				PetService:CraftAll()
			end
		end
	end)

	Pets:CreateToggle({
		Name = "ü•á Auto Equip Best",
		CurrentValue = false,
		Flag = "AutoEquipBest",
		Callback = function(Value)
			BestLooping = Value
		end,
	})

	task.spawn(function()
		while task.wait() do
			if BestLooping then
				local CurrentNumber1 = 0
				local CurrentNumber2 = 0
				local CurrentNumber3 = 0
				local CurrentPet1
				local CurrentPet2
				local CurrentPet3

				local PetData = DataController.data.Pets

				for i,v in pairs(PetData) do
					if v.multiplier > CurrentNumber1 then
						CurrentNumber1 = v.multiplier
						CurrentPet1 = i
					end
				end

				for i,v in pairs(PetData) do
					if v.multiplier > CurrentNumber2 and i ~= CurrentPet1 then
						CurrentNumber2 = v.multiplier
						CurrentPet2 = i
					end
				end

				for i,v in pairs(PetData) do
					if v.multiplier > CurrentNumber3 and i ~= CurrentPet1 and  i ~= CurrentPet2 then
						CurrentNumber3 = v.multiplier
						CurrentPet3 = i
					end
				end

				for i,v in pairs(PetData) do
					if v.equipped == true then
						PetService:Unequip(i)
					end
				end

				pcall(function()
					PetService:Equip(CurrentPet1)
					PetService:Equip(CurrentPet2)
					PetService:Equip(CurrentPet3)
				end)
				task.wait(BestDelay)
			end
		end
	end)

	Pets:CreateSlider({
		Name = "üêå Auto Equip Best Delay",
		Range = {0, 60},
		Increment = 1,
		CurrentValue = 5,
		Flag = "Delay",
		Callback = function(Value)
			BestDelay = Value
		end,
	})
end

Rayfield:LoadConfiguration()
